// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/vaidik-bajpai/medibridge/internal/models"
)

// ConditionStorer is an autogenerated mock type for the ConditionStorer type
type ConditionStorer struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, req
func (_m *ConditionStorer) Add(ctx context.Context, req *models.AddConditionReq) (*models.Condition, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *models.Condition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AddConditionReq) (*models.Condition, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.AddConditionReq) *models.Condition); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Condition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.AddConditionReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, pID
func (_m *ConditionStorer) Delete(ctx context.Context, pID string) error {
	ret := _m.Called(ctx, pID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, pID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConditionStorer creates a new instance of ConditionStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConditionStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConditionStorer {
	mock := &ConditionStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
