// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/vaidik-bajpai/medibridge/internal/models"
)

// AllergyStorer is an autogenerated mock type for the AllergyStorer type
type AllergyStorer struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, aID
func (_m *AllergyStorer) Delete(ctx context.Context, aID string) error {
	ret := _m.Called(ctx, aID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, aID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Record provides a mock function with given fields: ctx, req
func (_m *AllergyStorer) Record(ctx context.Context, req *models.RegAllergyReq) (*models.Allergy, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Record")
	}

	var r0 *models.Allergy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RegAllergyReq) (*models.Allergy, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.RegAllergyReq) *models.Allergy); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Allergy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.RegAllergyReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, req
func (_m *AllergyStorer) Update(ctx context.Context, req *models.UpdateAllergyReq) (*models.Allergy, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Allergy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UpdateAllergyReq) (*models.Allergy, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UpdateAllergyReq) *models.Allergy); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Allergy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UpdateAllergyReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAllergyStorer creates a new instance of AllergyStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAllergyStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AllergyStorer {
	mock := &AllergyStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
